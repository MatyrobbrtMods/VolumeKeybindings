import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'net.darkhax.curseforgegradle' version '1.0.10'
}

final var applyPlugins = [
    'eclipse', 'idea',
    'net.minecraftforge.gradle', 'org.parchmentmc.librarian.forgegradle',
    'org.spongepowered.mixin',

    'maven-publish', 'signing', 'io.codearte.nexus-staging'
]
applyPlugins.forEach(pl -> apply plugin: pl)

apply from: 'https://raw.githubusercontent.com/sciwhiz12/Concord/dev/1.18.x/gradle/version.gradle'

def mcVersion = properties.get('mc_version')
def modid = properties.get('mod_id')
version = properties.get('version')
group = 'com.matyrobbrt.volumekeybinds' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "$modid-$mcVersion"

println "Project Version: $version"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.05.02-1.18.2'

    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'volumekeybinds'

            mods {
                volumekeybinds {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('run')
        }

        gameTestServer {
            workingDirectory project.file('run')
        }

        data {
            workingDirectory project.file('run')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://cursemaven.com' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:$mcVersion-$forge_version"
}

final var expands = [
    'version': project.version,
    'modid': modid
]

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
processResources {
    inputs.properties expands
    filesMatching(resourceTargets) {
        expand expands
    }
    exclude ".cache/cache"
}

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
def manifestAttributes = [
    "Specification-Title"     : "VolumeKeybinds",
    "Specification-Vendor"    : "Matyrobbrt",
    "Specification-Version"   : "1",
    "Implementation-Title"    : project.name,
    "Implementation-Version"  : version,
    "Implementation-Vendor"   : "Matyrobbrt",
    "Timestamp"               : currentDateTime,
    "Git-Commit"              : versions.getCommitId(),
    "Git-Commit-Timestamp"    : versions.getCommitTimestamp()
] as Map

jar {
    manifest.attributes(manifestAttributes);
}

jar.finalizedBy('reobfJar')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    it.apiToken = findProperty('curseforgeKey')
    it.group = 'publishing'

    var projectId = findProperty('curseforge_project')
    var mainFile = it.upload(projectId, jar)
    mainFile.changelog = file('changelog.txt')
    mainFile.releaseType = findProperty('release_type')

    it.dependsOn(jar)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
